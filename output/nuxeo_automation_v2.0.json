{
  "swagger": "2.0",
  "info": {
    "title": "Nuxeo REST API Operations",
    "version": "9.10"
  },
  "host": "localhost:8080",
  "basePath": "/nuxeo/site/api/v1/automation",
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/Actions.GET": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Actions.GET",
        "summary": "Retrieve list of available actions for a given category. Action context is built based on the Operation context (currentDocument will be fetched from Context if not provided as input). If this operation is executed in a chain that initialized the Seam context, it will be used for Action context",
        "tags": [
          "Services"
        ]
      }
    },
    "/AttachFiles": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "AttachFiles",
        "summary": "AttachFiles",
        "tags": [
          "Chain"
        ]
      }
    },
    "/Audit.LogEvent": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Audit.LogEvent",
        "summary": "Log events into audit for each of the input document. The operation accept as input one ore more documents that are returned back as the output.",
        "tags": [
          "Services"
        ]
      }
    },
    "/Audit.Query": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Audit.Query",
        "summary": "Execute a JPA query against the Audit Service. This is returning a blob with the query result. The result is a serialized JSON array. You can use the context to set query variables but you must prefix using 'audit.query.' the context variable keys that match the ones in the query.",
        "tags": [
          "Services"
        ]
      }
    },
    "/Audit.QueryWithPageProvider": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Audit.QueryWithPageProvider",
        "summary": "Perform a query or a named provider query against Audit logs. Result is paginated. The query result will become the input for the next operation. If no query or provider name is given, a query based on default Audit page provider will be executed.",
        "tags": [
          "Fetch"
        ]
      }
    },
    "/Audit.Restore": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Audit.Restore",
        "summary": "Restore log entries from an audit storage implementation to the audit backend.",
        "tags": [
          "Services"
        ]
      }
    },
    "/Auth.LoginAs": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Auth.LoginAs",
        "summary": "Login As the given user. If no user is given a system login is performed. This is a void operations - the input will be returned back as the output.",
        "tags": [
          "Users & Groups"
        ]
      }
    },
    "/Auth.Logout": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Auth.Logout",
        "summary": "Perform a logout. This should be used only after using the Login As operation to restore original login. This is a void operations - the input will be returned back as the output.",
        "tags": [
          "Users & Groups"
        ]
      }
    },
    "/Blob.AttachOnDocument": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Blob.AttachOnDocument",
        "summary": "Attach the input file to the document given as a parameter. If the xpath points to a blob list then the blob is appended to the list, otherwise the xpath should point to a blob property. If the save parameter is set the document modification will be automatically saved. Return the blob.",
        "tags": [
          "Files"
        ]
      }
    },
    "/Blob.BulkDownload": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Blob.BulkDownload",
        "summary": "Prepare a Zip of a list of documents which is build asynchrously. Produced Zip will be available in the TransientStore with the key returned by the JSON.",
        "tags": [
          "Files"
        ]
      }
    },
    "/Blob.ConcatenatePDFs": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Blob.ConcatenatePDFs",
        "summary": "Given a File document holding a pdf on the file:content property and 2 pdfs on the files:files property, the following operation will provide a pdf that is the result of the merge of all the pdfs, with the content of the one in file:content property first.",
        "tags": [
          "Conversion"
        ]
      }
    },
    "/Blob.Convert": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Blob.Convert",
        "summary": "Convert the input file to a file of the given mime-type and return the new file.",
        "tags": [
          "Conversion"
        ]
      }
    },
    "/Blob.CreateFromURL": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Blob.CreateFromURL",
        "summary": "Creates a file from a given URL. The file parameter specifies how to retrieve the file content. It should be an URL to the file you want to use as the source. You can also use an expression to get an URL from the context. Returns the created file.",
        "tags": [
          "Fetch"
        ]
      }
    },
    "/Blob.CreateZip": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Blob.CreateZip",
        "summary": "Creates a zip file from the input file(s). If no file name is given, the first file name in the input will be used. Returns the zip file.",
        "tags": [
          "Files"
        ]
      }
    },
    "/Blob.ExportToFS": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Blob.ExportToFS",
        "summary": "Save the input blob(s) as a file(s) into the given target directory. The blob(s) filename is used as the file name. You can specify an optional <b>prefix</b> string to prepend to the file name. Return back the blob(s).",
        "tags": [
          "Files"
        ]
      }
    },
    "/Blob.ImportClipboard": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Blob.ImportClipboard",
        "summary": "Blob.ImportClipboard",
        "tags": [
          "Chain"
        ]
      }
    },
    "/Blob.ImportWorklist": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Blob.ImportWorklist",
        "summary": "Blob.ImportWorklist",
        "tags": [
          "Chain"
        ]
      }
    },
    "/Blob.PostToURL": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Blob.PostToURL",
        "summary": "Post the input file to a target HTTP URL. Returns back the input file.",
        "tags": [
          "Files"
        ]
      }
    },
    "/Blob.ReadMetadata": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Blob.ReadMetadata",
        "summary": "Read Metadata From Binary with the default Nuxeo processor.",
        "tags": [
          "Files"
        ]
      }
    },
    "/Blob.RemoveFromDocument": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Blob.RemoveFromDocument",
        "summary": "Remove the file attached to the input document as specified by the 'xpath' parameter. If the 'xpath' point to a blob list then the list will be cleared. If the file to remove is part of a list it will be removed from the list otherwise the 'xpath' should point to a blob property that will be removed. If the save parameter is set the document modification will be automatically saved. Return the document.",
        "tags": [
          "Files"
        ]
      }
    },
    "/Blob.RunConverter": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Blob.RunConverter",
        "summary": "Simply call a converter based on the 'converter' parameter. You can pass the converter properties with the 'properties' parameter.",
        "tags": [
          "Conversion"
        ]
      }
    },
    "/Blob.SetMetadataFromContext": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Blob.SetMetadataFromContext",
        "summary": "Write Metadata To Blob From Context given a processor name (or the default Nuxeo one) and given metadata, and return the updated Blob.",
        "tags": [
          "Files"
        ]
      }
    },
    "/Blob.SetMetadataFromDocument": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Blob.SetMetadataFromDocument",
        "summary": "Write metadata to a Blob (xpath parameter, or BlobHolder if empty) from a document (input) given a custom metadata mapping defined in a Properties parameter, using a named processor (exifTool for instance).",
        "tags": [
          "Files"
        ]
      }
    },
    "/Blob.ToPDF": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Blob.ToPDF",
        "summary": "Convert the input file to a PDF and return the new file.",
        "tags": [
          "Conversion"
        ]
      }
    },
    "/BlobHolder.AttachOnCurrentDocument": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "BlobHolder.AttachOnCurrentDocument",
        "summary": "Attach the input file(s) to the current document using the BlobHolder abstraction",
        "tags": [
          "Files"
        ]
      }
    },
    "/Bulk.RunAction": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Bulk.RunAction",
        "summary": "Run a bulk action on a set of documents expressed by a NXQL.",
        "tags": [
          "Services"
        ]
      }
    },
    "/Bulk.WaitForAction": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Bulk.WaitForAction",
        "summary": "Wait until Bulk computation is done. This operation is meant to be used for tests. Its usage in production is not recommended.",
        "tags": [
          "Services"
        ]
      }
    },
    "/Business.BusinessCreateOperation": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Business.BusinessCreateOperation",
        "summary": "This operation map pojo client side to document adapter server side and create NX document assuming that pojo and adapter have both properties in common.",
        "tags": [
          "Business"
        ]
      }
    },
    "/Business.BusinessFetchOperation": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Business.BusinessFetchOperation",
        "summary": "This operation map pojo client side to document adapter server side and fetch the related NX document.",
        "tags": [
          "Business"
        ]
      }
    },
    "/Business.BusinessUpdateOperation": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Business.BusinessUpdateOperation",
        "summary": "This operation map pojo client side to document adapter server side and update the related NX document.",
        "tags": [
          "Business"
        ]
      }
    },
    "/Collection.Create": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Collection.Create",
        "summary": "Create a new collection. This is returning the document serialization of the created collection.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Collection.GetDocumentsFromCollection": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Collection.GetDocumentsFromCollection",
        "summary": "Get the list of documents visible by the currentUser in a collection. This is returning a list of documents.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Collection.RemoveFromCollection": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Collection.RemoveFromCollection",
        "summary": "Remove a list of documents from a collection. No value is returned.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Collection.Suggestion": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Collection.Suggestion",
        "summary": "Get the collection list accessible by the current user. This is returning a blob containing a serialized JSON array..",
        "tags": [
          "Services"
        ]
      }
    },
    "/Comment.Moderate": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Comment.Moderate",
        "summary": "Follow publish if accept is true, reject otherwise.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Context.FetchDocument": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.FetchDocument",
        "summary": "Fetch the input of the context as a document or list of documents. The document will become the input for the next operation.",
        "tags": [
          "Fetch"
        ]
      }
    },
    "/Context.FetchFile": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.FetchFile",
        "summary": "Fetch the input of the context as a file or list of files. The file(s) will become the input for the next operation.",
        "tags": [
          "Fetch"
        ]
      }
    },
    "/Context.GetEmailsWithPermissionOnDoc": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.GetEmailsWithPermissionOnDoc",
        "summary": "Fetch the principal emails that have a given permission on the input document and then set them in the context under the given key variable name. The operation returns the input document. You can later use the list of principals set by this operation on the context from another operation. The 'key' argument represents the variable name and the 'permission' argument the permission to check. If the 'ignore groups' argument is false then groups are recursively resolved, extracting user members of these groups. Be <b>warned</b> that this may be a very consuming operation.<ul>Note that <li></li><li>groups are not included</li><li>the list pushed into the context is a string list of emails.</li></ul>",
        "tags": [
          "Users & Groups"
        ]
      }
    },
    "/Context.GetTaskNames": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.GetTaskNames",
        "summary": "Returns a list of current user open tasks where their translated name matches (partially or fully ) the 'searchTerm' parameter. This operation is invoked from a select2widget and the number of returned results is limited to 15.",
        "tags": [
          "Workflow Context"
        ]
      }
    },
    "/Context.GetUsersGroupIdsWithPermissionOnDoc": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.GetUsersGroupIdsWithPermissionOnDoc",
        "summary": "Fetch the users and groups that have a given permission on the input document and then set them in the context under the given key variable name. The operation returns the input document. You can later use the list of identifiers set by this operation on the context from another operation. The 'key' argument represents the variable name and the 'permission' argument the permission to check. If the 'ignore groups' argument is false then groups will be part of the result. If the 'resolve groups' argument is true then groups are recursively resolved, adding user members of these groups in place of them. Be <b>warned</b> that this may be a very consuming operation. If the 'prefix identifiers' argument is true, then user identifiers are prefixed by 'user:' and groups identifiers are prefixed by 'group:'.",
        "tags": [
          "Users & Groups"
        ]
      }
    },
    "/Context.PopBlob": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.PopBlob",
        "summary": "Restore the last saved input file in the context input stack. This operation must be used only if a PUSH operation was previously made. Return the last <i>pushed</i> file.",
        "tags": [
          "Push & Pop"
        ]
      }
    },
    "/Context.PopBlobList": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.PopBlobList",
        "summary": "Restore the last saved input file list in the context input stack",
        "tags": [
          "Push & Pop"
        ]
      }
    },
    "/Context.PopDocument": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.PopDocument",
        "summary": "Restore the last saved input document in the context input stack. This operation must be used only if a PUSH operation was previously made. Return the last <i>pushed</i> document.",
        "tags": [
          "Push & Pop"
        ]
      }
    },
    "/Context.PopDocumentList": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.PopDocumentList",
        "summary": "Restore the last saved input document list in the context input stack",
        "tags": [
          "Push & Pop"
        ]
      }
    },
    "/Context.PullBlob": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.PullBlob",
        "summary": "Restore the last saved input file in the context input stack. This operation must be used only if a PUSH operation was previously made. Return the first <i>pushed</i> file.",
        "tags": [
          "Push & Pop"
        ]
      }
    },
    "/Context.PullBlobList": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.PullBlobList",
        "summary": "Restore the first saved input file list in the context input stack",
        "tags": [
          "Push & Pop"
        ]
      }
    },
    "/Context.PullDocument": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.PullDocument",
        "summary": "Restore the first saved input document in the context input stack. This operation must be used only if a PUSH operation was previously made. Return the first <i>pushed</i> document.",
        "tags": [
          "Push & Pop"
        ]
      }
    },
    "/Context.PullDocumentList": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.PullDocumentList",
        "summary": "Restore the first saved input document list in the context input stack",
        "tags": [
          "Push & Pop"
        ]
      }
    },
    "/Context.PushBlob": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.PushBlob",
        "summary": "Push the input file on the context stack. The file can be restored later as the input using the corrresponding pop operation. Returns the input file.",
        "tags": [
          "Push & Pop"
        ]
      }
    },
    "/Context.PushBlobList": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.PushBlobList",
        "summary": "Push the input file list on the context stack. The file list can be restored later as the input using the corrresponding pop operation. Returns the input file list.",
        "tags": [
          "Push & Pop"
        ]
      }
    },
    "/Context.PushDocument": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.PushDocument",
        "summary": "Push the input document on the context stack. The document can be restored later as the input using the corrresponding pop operation. Returns the input document.",
        "tags": [
          "Push & Pop"
        ]
      }
    },
    "/Context.PushDocumentList": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.PushDocumentList",
        "summary": "Push the input document list on the context stack. The document list can be restored later as the input using the corrresponding pop operation. Returns the input document list.",
        "tags": [
          "Push & Pop"
        ]
      }
    },
    "/Context.RestoreBlobInput": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.RestoreBlobInput",
        "summary": "Restore the file input from a context variable given its name. Return the file.",
        "tags": [
          "Execution Context"
        ]
      }
    },
    "/Context.RestoreBlobInputFromScript": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.RestoreBlobInputFromScript",
        "summary": "Run a script and return the result blob object of the script the output of the operation",
        "tags": [
          "Execution Context"
        ]
      }
    },
    "/Context.RestoreBlobsInput": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.RestoreBlobsInput",
        "summary": "Restore the file list input from a context variable given its name. Return the files.",
        "tags": [
          "Execution Context"
        ]
      }
    },
    "/Context.RestoreBlobsInputFromScript": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.RestoreBlobsInputFromScript",
        "summary": "Run a script and return the result Blobs object of the script the output of the operation",
        "tags": [
          "Execution Context"
        ]
      }
    },
    "/Context.RestoreDocumentInput": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.RestoreDocumentInput",
        "summary": "Restore the document input from a context variable given its name. Return the document.",
        "tags": [
          "Execution Context"
        ]
      }
    },
    "/Context.RestoreDocumentInputFromScript": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.RestoreDocumentInputFromScript",
        "summary": "Run a script and return the result Document object of the script the output of the operation",
        "tags": [
          "Execution Context"
        ]
      }
    },
    "/Context.RestoreDocumentsInput": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.RestoreDocumentsInput",
        "summary": "Restore the document list input from a context variable given its name. Return the document list.",
        "tags": [
          "Execution Context"
        ]
      }
    },
    "/Context.RestoreDocumentsInputFromScript": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.RestoreDocumentsInputFromScript",
        "summary": "Run a script and return the result documents object of the script the output of the operation",
        "tags": [
          "Execution Context"
        ]
      }
    },
    "/Context.RunDocumentOperationInNewTx": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.RunDocumentOperationInNewTx",
        "summary": "Run an operation chain in a separate tx. The 'parameters' injected are accessible in the subcontext ChainParameters. For instance, @{ChainParameters['parameterKey']}.",
        "tags": [
          "Execution Flow"
        ]
      }
    },
    "/Context.SetInputAsVar": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.SetInputAsVar",
        "summary": "Set a context variable that points to the current input object. You must give a name for the variable. This operation works on any input type and return back the input as the output.",
        "tags": [
          "Execution Context"
        ]
      }
    },
    "/Context.SetMetadataFromBlob": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.SetMetadataFromBlob",
        "summary": "Read Metadata From binary to Context for a given input blob and given metadata to inject into the Operation context (if not specified, all metadata will be injected) ",
        "tags": [
          "Execution Context"
        ]
      }
    },
    "/Context.SetVar": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.SetVar",
        "summary": "Set a context variable given a name and the value. To compute the value at runtime from the current context you should use an EL expression as the value. This operation works on any input type and return back the input as the output.",
        "tags": [
          "Execution Context"
        ]
      }
    },
    "/Context.SetWorkflowVar": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.SetWorkflowVar",
        "summary": "Set a workflow variable. The workflow variable must exists on the workflow. If no workflowId is specified the variable is set on the current workflow.To compute the value at runtime from the current context you should use a MVEL expression as the value. This operation works on any input type and return back the input as the output.",
        "tags": [
          "Workflow Context"
        ]
      }
    },
    "/Context.StartWorkflow": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Context.StartWorkflow",
        "summary": "Starts the workflow with the given model id on the input documents. Returns back the input documents.The id of the created workflow instance is available under the \"workflowInstanceId\" context variable.@Since 5.7.2 you can set multiple variables on the workflow (before 5.8 only scalar types are supported). The variables are specified as <i>key=value</i> pairs separated by a new line.To specify multi-line values you can use a \\ character followed by a new line. <p>Example:<pre>description=foo bar</pre>For updating a date, you will need to expose the value as ISO 8601 format, for instance : <p>Example:<pre>title=The Document Title<br>issued=@{org.nuxeo.ecm.core.schema.utils.DateParser.formatW3CDateTime(CurrentDate.date)}</pre><p> @since 5.9.3 and 5.8.0-HF10 you can also set variables of complex types, by submiting a JSON representation: <p><pre>assignees = [\"John Doe\", \"John Test\"]</pre></p>",
        "tags": [
          "Workflow Context"
        ]
      }
    },
    "/Counters.GET": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Counters.GET",
        "summary": "Retrieve data collected by one or more Counters",
        "tags": [
          "Services"
        ]
      }
    },
    "/Directory.CreateEntries": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Directory.CreateEntries",
        "summary": "Creates directory entries. Entries are sent as a JSON array. Returning the created entries ids as a JSON array.",
        "tags": [
          "Services"
        ]
      }
    },
    "/Directory.CreateVocabularyEntry": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Directory.CreateVocabularyEntry",
        "summary": "Add a new entry in the <i>vocabularyName</i> vocabulary only if <i>id</i> is not found (an existing entry isnot updated). If <i>label</i> is empty, it is set to the id. WARNING: Current user must have enough rights to write in a vocabulary.",
        "tags": [
          "Services"
        ]
      }
    },
    "/Directory.DeleteEntries": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Directory.DeleteEntries",
        "summary": "Deletes directory entries. Entries ids to delete are sent through a JSON array. Returns deleted entries id as a JSON array.",
        "tags": [
          "Services"
        ]
      }
    },
    "/Directory.Entries": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Directory.Entries",
        "summary": "Get the entries of a directory. This is returning a blob containing a serialized JSON array. The input document, if specified, is used as a context for a potential local configuration of the directory.",
        "tags": [
          "Services"
        ]
      }
    },
    "/Directory.Projection": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Directory.Projection",
        "summary": "Executes a query using given filter and return only the column *<b>columnName</b>*. The result is assigned to the context variable *<b>variableName</b>*. The filters are specified as <i>key=value</i> pairs separated by a new line. The key used for a filter is the column name of the directory. To specify multi-line values you can use a \\ character followed by a new line. <p>Example:<pre>firstName=John<br>lastName=doe</pre>By default, the search filters use exact match. You can do a fulltext search on some specific columns using the fulltextFields. it's specified as comma separated columnName, for instance : <p>Example:<pre>firstName,lastName</pre>",
        "tags": [
          "Services"
        ]
      }
    },
    "/Directory.ReadEntries": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Directory.ReadEntries",
        "summary": "Reads directory entries. Entries ids to read are sent as a JSON array. Returns the entries as a JSON array of JSON objects containing all fields.",
        "tags": [
          "Services"
        ]
      }
    },
    "/Directory.SuggestEntries": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Directory.SuggestEntries",
        "summary": "Get the entries suggestions of a directory. This is returning a blob containing a serialized JSON array. Prefix parameter is used to filter the entries.",
        "tags": [
          "Services"
        ]
      }
    },
    "/Directory.UpdateEntries": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Directory.UpdateEntries",
        "summary": "Updates directory entries. Entries to update are sent as a JSON array. Returns the updated entries ids as a JSON array of JSON objects containing all fields",
        "tags": [
          "Services"
        ]
      }
    },
    "/Document.AddACE": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.AddACE",
        "summary": "Set Acces Control Entry on the input document(s). Returns the document(s).",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.AddFacet": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.AddFacet",
        "summary": "Adds the facet to the document. <p>Save parameter automatically saves the document in the database. It has to be turned off when this operation is used in the context of the empty document created, about to create, before document modification, document modified events.</p>",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.AddItemToListProperty": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.AddItemToListProperty",
        "summary": "This operation can add new entries to a multivalued complex property. The xpath parameter is the property that should be updated (e.g.: contract:customers). The value parameter is a String containing the JSON-formatted list of entries to add. E.g.: assuming a Contract document type holding customers, each having a firstName and lastName property: [{\"lastName\":\"Norris\", \"firstName\": \"Chuck\"}, {\"lastName\":\"Lee\", \"firstName\": \"Bruce\"}] . Activating the save parameter forces the changes to be written in database immediately (at the cost of performance loss), otherwise changes made to the document will be written in bulk when the chain succeeds. <p>Save parameter has to be turned off when this operation is used in the context of the empty document created, about to create, before document modification, document modified events.</p>",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.AddPermission": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.AddPermission",
        "summary": "Add Permission on the input document(s). Returns the document(s).",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.AddRelation": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.AddRelation",
        "summary": "Create a relation between 2 documents. The subject of the relation will be the input of the operation and the object of the relation will be retrieved from the context using the 'object' field. The 'predicate' field specifies the relation predicate (When using a known predicate, use the full URL like 'http://purl.org/dc/terms/IsBasedOn', unknown predicates will be treated as plain strings and be the same on the subject and object). The 'outgoing' flag indicates the direction of the relation - the default is false which means the relation will go from the input object to the object specified as 'object' parameter. Return back the subject document.",
        "tags": [
          "Services"
        ]
      }
    },
    "/Document.AddToCollection": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.AddToCollection",
        "summary": "Add a list of documents in a collection. No value is returned.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.AddToFavorites": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.AddToFavorites",
        "summary": "Add a list of documents in the favorites. No value is returned.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.BlockPermissionInheritance": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.BlockPermissionInheritance",
        "summary": "Block the permission inheritance on the input document(s). Returns the document(s).",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.CheckIn": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.CheckIn",
        "summary": "Checks in the input document. Returns back the document.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.CheckOut": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.CheckOut",
        "summary": "Checks out the input document. Returns back the document.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.Copy": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.Copy",
        "summary": "Copy the input document into the given folder. The name parameter will be used as the copy name otherwise if not specified the original name will be preserved. The target folder can be specified as an absolute or relative path (relative to the input document) as an UID or by using an EL expression. Return the newly created document (the copy).",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.CopySchema": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.CopySchema",
        "summary": "Copy all the properties from the schema of the source into the input document. Either sourceId or sourcePath parameter should be filled. When both are filled, sourceId will be used. If saveDocument is true, the document is saved. If save is true, the session is saved (setting save to true and saveDocument to false has no effect, the session will not be saved)",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.Create": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.Create",
        "summary": "Create a new document in the input folder. You can initialize the document properties using the 'properties' parameter. The properties are specified as <i>key=value</i> pairs separated by a new line. The key used for a property is the property xpath. To specify multi-line values, you can use a \\ character followed by a new line. <p>Example:<pre>dc:title=The Document Title<br>dc:description=foo bar</pre>. Returns the created document.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.CreateLiveProxy": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.CreateLiveProxy",
        "summary": "This operation will create a proxy that points the given document as input. This is like a symbolic link for File System. The proxy will be created into the destination specified as parameter. <p>The document returned is the proxy live.<p> Remark: <b>you will have a strange behavior if the input is a folderish.</b>",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.CreateVersion": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.CreateVersion",
        "summary": "Create a new version for the input document. Any modification made on the document by the chain will be automatically saved. Increment version if this was specified through the 'snapshot' parameter. This operation should not be used in the context of the empty document created, about to create, before document modification, document modified events. Returns the live document (not the version).",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.Delete": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.Delete",
        "summary": "Delete the input document. The previous context input will be restored for the next operation.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.DeleteRelation": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.DeleteRelation",
        "summary": "Delete a relation between 2 documents. The subject of the relation will be the input of the operation and the object of the relation will be retrieved from the context using the 'object' field. The 'predicate' field specifies the relation predicate (When using a known predicate, use the full URL like 'purl.org/dc/terms/IsBasedOn', unknown predicates will be treated as plain strings and be the same on the subject and object). The 'outgoing' flag indicates the direction of the relation - the default is false which means the relation will go from the input object to the object specified as 'object' parameter. Return back the subject document.",
        "tags": [
          "Services"
        ]
      }
    },
    "/Document.EmptyTrash": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.EmptyTrash",
        "summary": "Emtpy a folder's trash by permanently deleting documents marked as trashed.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.Export": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.Export",
        "summary": "Export the given document.",
        "tags": [
          "Services"
        ]
      }
    },
    "/Document.FetchByProperty": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.FetchByProperty",
        "summary": "For each specified string property value, fetch all documents that match the property and the optional where clause. Matching documents are collected into a list and the returned to the next operation. The operation has no input.",
        "tags": [
          "Fetch"
        ]
      }
    },
    "/Document.Filter": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.Filter",
        "summary": "Filter the input list of documents given a condition. The condition can be expressed using 4 parameters: types, facets, lifecycle and condition. If more than one parameter is specified an AND will be used to group conditions. <br>The 'types' parameter can take a comma separated list of document type: File,Note.<br>The 'facet' parameter can take a single facet name.<br> The 'life cycle' parameter takes a name of a life cycle state the document should have.<br>The 'condition' parameter can take any EL expression.<p>Returns the list of documents that match the filter condition.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.FollowLifecycleTransition": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.FollowLifecycleTransition",
        "summary": "Follow the given transition on the input document life cycle state",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.GetBlob": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.GetBlob",
        "summary": "Gets a file attached to the input document. The file location is specified using an xpath to the blob property of the document. Returns the file.",
        "tags": [
          "Files"
        ]
      }
    },
    "/Document.GetBlobs": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.GetBlobs",
        "summary": "Gets a list of all blobs that are attached on the input document. Returns a list of files.",
        "tags": [
          "Files"
        ]
      }
    },
    "/Document.GetBlobsByProperty": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.GetBlobsByProperty",
        "summary": "Gets a list of files that are attached on the input document. The files location should be specified using the blob list property xpath. Returns a list of files.",
        "tags": [
          "Files"
        ]
      }
    },
    "/Document.GetChild": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.GetChild",
        "summary": "Get a child document given its name. Take as input the parent document and return the child document.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.GetChildren": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.GetChildren",
        "summary": "Get the children of a document. The list of children will become the input for the next operation",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.GetContainerRendition": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.GetContainerRendition",
        "summary": "Gets the list of blob of the folder's children or the collection's members default renditions. Returns a blob list file containing all the default rendition blobs.",
        "tags": [
          "Files"
        ]
      }
    },
    "/Document.GetLastVersion": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.GetLastVersion",
        "summary": "Returns the last version of the document if it exists.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.GetLinkedDocuments": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.GetLinkedDocuments",
        "summary": "Get the relations for the input document. The 'outgoing' parameter ca be used to specify whether outgoing or incoming relations should be returned. Retuns a document list.",
        "tags": [
          "Services"
        ]
      }
    },
    "/Document.GetParent": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.GetParent",
        "summary": "Get the parent document of the input document. The parent document will become the input for the next operation. You can use the 'type' parameter to specify which parent to select from the document ancestors",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.GetRendition": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.GetRendition",
        "summary": "Gets a document rendition given its name. Returns the rendition blob.",
        "tags": [
          "Files"
        ]
      }
    },
    "/Document.GetVersions": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.GetVersions",
        "summary": "Gets the versions of the input document.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.Lock": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.Lock",
        "summary": "Lock the input document for the current user. Returns back the locked document.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.Mail": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.Mail",
        "summary": "Send an email using the input document to the specified recipients. You can use the HTML parameter to specify whether you message is in HTML format or in plain text. Also you can attach any blob on the current document to the message by using the comma separated list of xpath expressions 'files'. If you xpath points to a blob list all blobs in the list will be attached. Return back the input document(s). If rollbackOnError is true, the whole chain will be rollbacked if an error occurs while trying to send the email (for instance if no SMTP server is configured), else a simple warning will be logged and the chain will continue.",
        "tags": [
          "Notification"
        ]
      }
    },
    "/Document.Move": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.Move",
        "summary": "Move the input document into the target folder.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.MoveCollectionMember": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.MoveCollectionMember",
        "summary": "Move member1 of a collection right after member2 of the same collection. If member2 is not sepcified, the member1 is moved to first position. Returns true if successfully moved.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.Order": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.Order",
        "summary": "Given a parent document, order the source child before the destination child.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.PublishToSection": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.PublishToSection",
        "summary": "Publish the input document into the target section. Existing proxy is overrided if the override attribute is set. Return the created proxy.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.PublishToSections": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.PublishToSections",
        "summary": "Publish the input document(s) into several target sections. The target is evaluated to a document list (can be a path, UID or EL expression). Existing proxy is overridden if the override attribute is set. Returns a list with the created proxies.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.Reload": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.Reload",
        "summary": "Reload the input document from the repository. Any previous modification made by the chain on this document will be lost if these modifications were not saved. Return the reloaded document.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.RemoveACL": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.RemoveACL",
        "summary": "Remove a named Acces Control List from the input document(s). Returns the document(s).",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.RemoveEntryOfMultivaluedProperty": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.RemoveEntryOfMultivaluedProperty",
        "summary": "Remove the first entry of the giving value in the multivalued xpath, does nothing if does not exist: <ul<li>if 'is Remove All' is check, all entry instance in the list.</li><li>if not will remove just the first one found</li></ul><p>Save parameter automatically saves the document in the database. It has to be turned off when this operation is used in the context of the empty document created, about to create, before document modification, document modified events.</p>",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.RemoveFacet": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.RemoveFacet",
        "summary": "Removes the facet from the document. <p>Save parameter automatically saves the document in the database. It has to be turned off when this operation is used in the context of the empty document created, about to create, before document modification, document modified events.</p>",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.RemoveFromFavorites": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.RemoveFromFavorites",
        "summary": "Remove a list of documents from the favorites. No value is returned.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.RemoveItemFromListProperty": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.RemoveItemFromListProperty",
        "summary": "This operation removes an entry from a multivalued complex property, specified using a xpath (e.g.: contract:customers). A specific entry can be removed using its index number. If the index parameter is left empty, all entries in the property are removed. Activating the save parameter forces the changes to be written in database immediately (at the cost of performance loss), otherwise changes made to the document will be written in bulk when the chain succeeds. <p>Save parameter has to be turned off when this operation is used in the context of the empty document created, about to create, before document modification, document modified events.</p>",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.RemovePermission": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.RemovePermission",
        "summary": "Remove a permission given its id or all permissions for a given user on the input document(s). Parameter 'id' or 'user' must be set. Returns the document(s).",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.RemoveProperty": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.RemoveProperty",
        "summary": "Remove the given property of the input document(s) as specified by the 'xpath' parameter. If the property points to a list then clear the list. Removing a property means setting it to null. Return the document(s).",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.RemoveProxies": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.RemoveProxies",
        "summary": "Will remove all proxies pointing on the input document. Useful for instance to unpublish a document. Notice: this operation will remove all proxies, including the ones pointing to the current document version (live proxies). Activating the save parameter forces the changes to be written in database immediately (at the cost of performance loss).",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.ReplacePermission": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.ReplacePermission",
        "summary": "Replace a given permission on the input document(s). Returns the document(s).",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.ResetSchema": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.ResetSchema",
        "summary": "Reset all properties for a given schema or xpath. If saveDocument is true, the document is saved. If save is true, the session is saved (setting save to true and saveDocument to false has no effect, the session will not be saved)",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.RestoreVersion": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.RestoreVersion",
        "summary": "Restores a document to the input version document. If createVersion is true, a version of the live document will be created before restoring it to the input version. If checkout is true, a checkout will be processed after restoring the document, visible in the UI by the '+' symbol beside the version number. Returns the restored document.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.Routing.BackToReady": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.Routing.BackToReady",
        "summary": "Set the step back to a ready state.",
        "tags": [
          "Routing"
        ]
      }
    },
    "/Document.Routing.EvaluateCondition": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.Routing.EvaluateCondition",
        "summary": "Set the task as done.",
        "tags": [
          "Routing"
        ]
      }
    },
    "/Document.Routing.GetGraph": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.Routing.GetGraph",
        "summary": "get graph nodes.",
        "tags": [
          "Routing"
        ]
      }
    },
    "/Document.Routing.Resume.Step": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.Routing.Resume.Step",
        "summary": "Resume a step that were in running step.",
        "tags": [
          "Routing"
        ]
      }
    },
    "/Document.Routing.SetRunningStepFromTask": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.Routing.SetRunningStepFromTask",
        "summary": "Set the current running step as <document.routing.step> context variable. The comments from the task can be mapped to originating step.",
        "tags": [
          "Routing"
        ]
      }
    },
    "/Document.Routing.Step.Done": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.Routing.Step.Done",
        "summary": "Set the step as done.",
        "tags": [
          "Routing"
        ]
      }
    },
    "/Document.Routing.UpdateCommentsInfoOnDocument": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.Routing.UpdateCommentsInfoOnDocument",
        "summary": "Update comments number on the document",
        "tags": [
          "Routing"
        ]
      }
    },
    "/Document.Save": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.Save",
        "summary": "Save in the repository any modification that was done on the input document. This operation should not be used in the context of the empty document created, about to create, before document modification, document modified events. Returns the saved document.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.SendNotificationEmailForPermission": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.SendNotificationEmailForPermission",
        "summary": "Send the notification email for a permission on the input document(s). Returns the document(s).",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.SetBlob": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.SetBlob",
        "summary": "Set the input file to the given property on the input document. If the xpath points to a blob list then the blob is appended to the list, otherwise the xpath should point to a blob property. If the save parameter is set the document modification will be automatically saved. Return the document.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.SetBlobName": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.SetBlobName",
        "summary": "Modify the filename of a file stored in the input document. The file is found in the input document given its xpath specified through the 'xpath' parameter. Return back the input document.",
        "tags": [
          "Files"
        ]
      }
    },
    "/Document.SetMetadataFromBlob": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.SetMetadataFromBlob",
        "summary": "Write Metadata To Document From Binary according to metadata mapping.",
        "tags": [
          "Files"
        ]
      }
    },
    "/Document.SetProperty": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.SetProperty",
        "summary": "Set a single property value on the input document. The property is specified using its xpath. Save parameter automatically saves the document in the database. It has to be turned off when this operation is used in the context of the empty document created, about to create, before document modification, document modified events. Returns the modified document.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.Subscribe": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.Subscribe",
        "summary": "Subscribe one or more documents. No value is returned.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.Trash": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.Trash",
        "summary": "Moves documents to the trash.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.UnblockPermissionInheritance": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.UnblockPermissionInheritance",
        "summary": "Unblock the permission inheritance on the input document(s). Returns the document(s).",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.Unlock": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.Unlock",
        "summary": "Unlock the input document. The unlock will be executed in the name of the current user. An user can unlock a document only if has the UNLOCK permission granted on the document or if it the same user as the one that locked the document. Return the unlocked document",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.UnpublishAll": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.UnpublishAll",
        "summary": "Unpublish all publications of the input document..",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.Unsubscribe": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.Unsubscribe",
        "summary": "Unsubscribe one or more documents. No value is returned.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.Untrash": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.Untrash",
        "summary": "Undeletes documents (and ancestors if needed to make them visible)..",
        "tags": [
          "Document"
        ]
      }
    },
    "/Document.Update": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Document.Update",
        "summary": "Set multiple properties on the input document. The properties are specified as <i>key=value</i> pairs separated by a new line. The key used for a property is the property xpath. To specify multi-line values you can use a \\ character followed by a new line. <p>Example:<pre>dc:title=The Document Title<br>dc:description=foo bar</pre>For updating a date, you will need to expose the value as ISO 8601 format, for instance : <p>Example:<pre>dc:title=The Document Title<br>dc:issued=@{org.nuxeo.ecm.core.schema.utils.DateParser.formatW3CDateTime(CurrentDate.date)}</pre><p>Returns back the updated document.<p>To update a multi-valued field with multiple values:<pre>custom:multivalued=a,b,c,d</pre><p>Save parameter automatically saves the document in the database. It has to be turned off when this operation is used in the context of the empty document created, about to create, before document modification, document modified events.</p>",
        "tags": [
          "Document"
        ]
      }
    },
    "/DocumentMultivaluedProperty.addItem": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "DocumentMultivaluedProperty.addItem",
        "summary": "Add value into the field expressed by the xpath parameter. This field must be a multivalued metadata.<p> 'checkExists' parameter enables to add value only if doesn't already exists in the field: <ul><li> if checked, the value will not be added if it exists already in the list</li><li>if not checked the value will be always added</li</ul>.<p> Remark: <b>only works for a field that stores a list of scalars (string, boolean, date, int, long) and not list of complex types.</b></p><p>Save parameter automatically saves the document in the database. It has to be turned off when this operation is used in the context of the empty document created, about to create, before document modification, document modified events.</p>",
        "tags": [
          "Document"
        ]
      }
    },
    "/Elasticsearch.BulkIndex": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Elasticsearch.BulkIndex",
        "summary": "Enable to index Nuxeo documents using the Bulk Service.",
        "tags": [
          "Services"
        ]
      }
    },
    "/Elasticsearch.Index": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Elasticsearch.Index",
        "summary": "Enable to index Nuxeo documents.",
        "tags": [
          "Services"
        ]
      }
    },
    "/Elasticsearch.WaitForIndexing": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Elasticsearch.WaitForIndexing",
        "summary": "Wait until Elasticsearch indexing is done.",
        "tags": [
          "Services"
        ]
      }
    },
    "/Event.Fire": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Event.Fire",
        "summary": "Send a Nuxeo event.",
        "tags": [
          "Notification"
        ]
      }
    },
    "/Favorite.Fetch": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Favorite.Fetch",
        "summary": "Fetch the favorites document root collection.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Favorite.GetDocuments": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Favorite.GetDocuments",
        "summary": "Get the list of documents visible from the currentUser's favorites. This is returning a list of documents.",
        "tags": [
          "Document"
        ]
      }
    },
    "/FileManager.Import": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "FileManager.Import",
        "summary": "Create Document(s) from Blob(s) using the FileManagerService. The destination container must be passed in a Context variable named currentDocument.",
        "tags": [
          "Services"
        ]
      }
    },
    "/FileManager.ImportInSeam": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "FileManager.ImportInSeam",
        "summary": "FileManager.ImportInSeam",
        "tags": [
          "Chain"
        ]
      }
    },
    "/FileManager.ImportWithMetaData": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "FileManager.ImportWithMetaData",
        "summary": "FileManager.ImportWithMetaData",
        "tags": [
          "Chain"
        ]
      }
    },
    "/FileManager.ImportWithMetaDataInSeam": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "FileManager.ImportWithMetaDataInSeam",
        "summary": "FileManager.ImportWithMetaDataInSeam",
        "tags": [
          "Chain"
        ]
      }
    },
    "/GetRepositories": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "GetRepositories",
        "summary": "Return the list of repository names.",
        "tags": [
          "Fetch"
        ]
      }
    },
    "/Group.CreateOrUpdate": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Group.CreateOrUpdate",
        "summary": "Create or Update Group",
        "tags": [
          "Users & Groups"
        ]
      }
    },
    "/Image.Blob.ConvertToPDF": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Image.Blob.ConvertToPDF",
        "summary": "Image.Blob.ConvertToPDF",
        "tags": [
          "Chain"
        ]
      }
    },
    "/Image.Blob.Resize": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Image.Blob.Resize",
        "summary": "Image.Blob.Resize",
        "tags": [
          "Chain"
        ]
      }
    },
    "/JsonStack.ToggleDisplay": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "JsonStack.ToggleDisplay",
        "summary": "Toggle stack display in json response for all rest api calls in Nuxeo",
        "tags": [
          "Execution Context"
        ]
      }
    },
    "/LocalConfiguration.PutSimpleConfigurationParameter": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "LocalConfiguration.PutSimpleConfigurationParameter",
        "summary": "Put a Simple Configuration parameter on the input document. Add the 'SimpleConfiguration' facet on the input document if needed. The user adding a parameter must have WRITE access on the input document",
        "tags": [
          "Local Configuration"
        ]
      }
    },
    "/LocalConfiguration.PutSimpleConfigurationParameters": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "LocalConfiguration.PutSimpleConfigurationParameters",
        "summary": "Put Simple Configuration parameters on the input document. Add the 'SimpleConfiguration' facet on the input document if needed. The parameters are specified as <i>key=value</i> pairs separated by a new line. The user adding parameters must have WRITE access on the input document.",
        "tags": [
          "Local Configuration"
        ]
      }
    },
    "/LocalConfiguration.SetSimpleConfigurationParameterAsVar": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "LocalConfiguration.SetSimpleConfigurationParameterAsVar",
        "summary": "Set a context variable that points to the value of the given parameter name in the SimpleConfiguration from the input Document. You must give a name for the variable.",
        "tags": [
          "Local Configuration"
        ]
      }
    },
    "/Log": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Log",
        "summary": "Logging with log4j",
        "tags": [
          "Notification"
        ]
      }
    },
    "/NRD-AC-PR-ChooseParticipants-Output": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NRD-AC-PR-ChooseParticipants-Output",
        "summary": "NRD-AC-PR-ChooseParticipants-Output",
        "tags": [
          "Chain"
        ]
      }
    },
    "/NRD-AC-PR-LockDocument": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NRD-AC-PR-LockDocument",
        "summary": "NRD-AC-PR-LockDocument",
        "tags": [
          "Chain"
        ]
      }
    },
    "/NRD-AC-PR-UnlockDocument": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NRD-AC-PR-UnlockDocument",
        "summary": "NRD-AC-PR-UnlockDocument",
        "tags": [
          "Chain"
        ]
      }
    },
    "/NRD-AC-PR-ValidateNode-Output": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NRD-AC-PR-ValidateNode-Output",
        "summary": "NRD-AC-PR-ValidateNode-Output",
        "tags": [
          "Chain"
        ]
      }
    },
    "/NRD-AC-PR-force-validate": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NRD-AC-PR-force-validate",
        "summary": "NRD-AC-PR-force-validate",
        "tags": [
          "Chain"
        ]
      }
    },
    "/NRD-AC-PR-storeTaskInfo": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NRD-AC-PR-storeTaskInfo",
        "summary": "NRD-AC-PR-storeTaskInfo",
        "tags": [
          "Chain"
        ]
      }
    },
    "/Navigation.ChangeCurrentTab": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Navigation.ChangeCurrentTab",
        "summary": "Change the selected tab for the current document. Preserve the current input.",
        "tags": [
          "User Interface"
        ]
      }
    },
    "/Navigation.GoBack": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Navigation.GoBack",
        "summary": "Cancels a document creation in UI, as if user was hitting the 'Cancel' button on a the document creation form. It returns the parent document, that would have been the created document container.",
        "tags": [
          "User Interface"
        ]
      }
    },
    "/NuxeoDrive.AddToLocallyEditedCollection": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NuxeoDrive.AddToLocallyEditedCollection",
        "summary": "Add the input document to the \"Locally Edited\" collection. Return the input document.",
        "tags": [
          "Services"
        ]
      }
    },
    "/NuxeoDrive.AttachBlob": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NuxeoDrive.AttachBlob",
        "summary": "Update the given document with the input blob. Return the input blob.",
        "tags": [
          "Services"
        ]
      }
    },
    "/NuxeoDrive.CanMove": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NuxeoDrive.CanMove",
        "summary": "Check if the document backing the file system item with the given source id can be moved to the document backing the file system item with the given destination id. Return the result as a JSON blob.",
        "tags": [
          "Services"
        ]
      }
    },
    "/NuxeoDrive.CreateFile": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NuxeoDrive.CreateFile",
        "summary": "Create a document from the input blob in the container backing the file system item with the given id. Return the file system item backed by the created document as a JSON blob.",
        "tags": [
          "Services"
        ]
      }
    },
    "/NuxeoDrive.CreateFolder": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NuxeoDrive.CreateFolder",
        "summary": "Create a container with the given name as title in the container backing the file system item with the given id. Return the file system item backed by the created container as a JSON blob.",
        "tags": [
          "Services"
        ]
      }
    },
    "/NuxeoDrive.CreateTestDocuments": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NuxeoDrive.CreateTestDocuments",
        "summary": "NuxeoDrive.CreateTestDocuments",
        "tags": [
          "Services"
        ]
      }
    },
    "/NuxeoDrive.Delete": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NuxeoDrive.Delete",
        "summary": "Delete the document backing the file system item with the given id.",
        "tags": [
          "Services"
        ]
      }
    },
    "/NuxeoDrive.FileSystemItemExists": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NuxeoDrive.FileSystemItemExists",
        "summary": "Check if the document backing the file system item with the given id exists. Return the result as a JSON blob.",
        "tags": [
          "Services"
        ]
      }
    },
    "/NuxeoDrive.GenerateConflictedItemName": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NuxeoDrive.GenerateConflictedItemName",
        "summary": "Generate a conflicted name for a file system item given its name, the currently authenticated user's first name and last name. Return the result as a JSON blob.",
        "tags": [
          "Services"
        ]
      }
    },
    "/NuxeoDrive.GetChangeSummary": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NuxeoDrive.GetChangeSummary",
        "summary": "Get a summary of document changes in the synchronization roots of the currently authenticated user. Return the result as a JSON blob.",
        "tags": [
          "Services"
        ]
      }
    },
    "/NuxeoDrive.GetChildren": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NuxeoDrive.GetChildren",
        "summary": "Get the children of the document backing the folder item with the given id. Return the results as a JSON blob.",
        "tags": [
          "Services"
        ]
      }
    },
    "/NuxeoDrive.GetClientUpdateInfo": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NuxeoDrive.GetClientUpdateInfo",
        "summary": "Get the information needed for the Nuxeo Drive client update. Return the result as a JSON blob.",
        "tags": [
          "Services"
        ]
      }
    },
    "/NuxeoDrive.GetFileSystemItem": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NuxeoDrive.GetFileSystemItem",
        "summary": "Get the file system item with the given id. Return the result as a JSON blob.",
        "tags": [
          "Services"
        ]
      }
    },
    "/NuxeoDrive.GetRoots": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NuxeoDrive.GetRoots",
        "summary": "Get the list of synchronization roots for the currently authenticated user.",
        "tags": [
          "Services"
        ]
      }
    },
    "/NuxeoDrive.GetTopLevelFolder": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NuxeoDrive.GetTopLevelFolder",
        "summary": "Get the top level folder item. Return the result as a JSON blob.",
        "tags": [
          "Services"
        ]
      }
    },
    "/NuxeoDrive.Move": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NuxeoDrive.Move",
        "summary": "Move the document backing the file system item with the given source id to the document backing the file system item with the given destination id. Return the moved file system item as a JSON blob.",
        "tags": [
          "Services"
        ]
      }
    },
    "/NuxeoDrive.Rename": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NuxeoDrive.Rename",
        "summary": "Rename the document backing the file system item with the given id to the given name. Return the file system item backed by the renamed document as a JSON blob.",
        "tags": [
          "Services"
        ]
      }
    },
    "/NuxeoDrive.ScrollDescendants": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NuxeoDrive.ScrollDescendants",
        "summary": "Retrieve at most batchSize descendants of the folder item with the given id and the given scrollId. When passing a null scrollId the initial search request is executed and the first batch of results is returned along with a scrollId which should be passed to the next call in order to retrieve the next batch of results. Ideally, the search context made available by the initial search request is kept alive during keepAlive milliseconds if keepAlive is positive. Results are not necessarily sorted. Return the results as a JSON blob.",
        "tags": [
          "Services"
        ]
      }
    },
    "/NuxeoDrive.SetActiveFactories": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NuxeoDrive.SetActiveFactories",
        "summary": "NuxeoDrive.SetActiveFactories",
        "tags": [
          "Services"
        ]
      }
    },
    "/NuxeoDrive.SetSynchronization": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NuxeoDrive.SetSynchronization",
        "summary": "If the enable parameter is true, register the input document as a synchronization root for the currently authenticated user. Unregister it otherwise.",
        "tags": [
          "Services"
        ]
      }
    },
    "/NuxeoDrive.SetVersioningOptions": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NuxeoDrive.SetVersioningOptions",
        "summary": "NuxeoDrive.SetVersioningOptions",
        "tags": [
          "Services"
        ]
      }
    },
    "/NuxeoDrive.SetupIntegrationTests": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NuxeoDrive.SetupIntegrationTests",
        "summary": "NuxeoDrive.SetupIntegrationTests",
        "tags": [
          "Services"
        ]
      }
    },
    "/NuxeoDrive.TearDownIntegrationTests": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NuxeoDrive.TearDownIntegrationTests",
        "summary": "NuxeoDrive.TearDownIntegrationTests",
        "tags": [
          "Services"
        ]
      }
    },
    "/NuxeoDrive.UpdateFile": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NuxeoDrive.UpdateFile",
        "summary": "Update the document backing the file system item with the given id with the input blob. Return the file system item backed by the updated document as a JSON blob.",
        "tags": [
          "Services"
        ]
      }
    },
    "/NuxeoDrive.WaitForAsyncCompletion": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NuxeoDrive.WaitForAsyncCompletion",
        "summary": "NuxeoDrive.WaitForAsyncCompletion",
        "tags": [
          "Services"
        ]
      }
    },
    "/NuxeoDrive.WaitForElasticsearchCompletion": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "NuxeoDrive.WaitForElasticsearchCompletion",
        "summary": "NuxeoDrive.WaitForElasticsearchCompletion",
        "tags": [
          "Services"
        ]
      }
    },
    "/PDF.AddPageNumbers": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "PDF.AddPageNumbers",
        "summary": "Add the page numbers to the PDF, using the misc parameters. If the PDF is encrypted, a password is required.",
        "tags": [
          "Conversion"
        ]
      }
    },
    "/PDF.ConvertToPictures": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "PDF.ConvertToPictures",
        "summary": "Convert each page of a PDF into a picture. Returns Blob list of pictures.",
        "tags": [
          "Conversion"
        ]
      }
    },
    "/PDF.Encrypt": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "PDF.Encrypt",
        "summary": "Encrypts the PDF with the given permissions, returning a copy. Permissions are print, modify, copy, modifyAnnot, fillForms, extractForAccessibility, assemble and printDegraded. Any missing permission is set to false (values are true or false, assemble=true for example). originalOwnerPwd is used if the PDF was originally encrypted. If no keyLength is provided, use 128. If the operation is ran on Document(s), xpath lets you specificy where to get the blob from (default: file:content).",
        "tags": [
          "Conversion"
        ]
      }
    },
    "/PDF.EncryptReadOnly": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "PDF.EncryptReadOnly",
        "summary": "Encrypts the PDF, returning a copy. User can read, print and copy but cannot modify. originalOwnerPwd is used if the PDF was originally encrypted. If ownerPwd is empty, use originalOwnerPwd to encrypt. If no keyLength is provided, use 128. If the operation is ran on Document(s), xpath lets you specificy where to get the blob from (default: file:content).",
        "tags": [
          "Conversion"
        ]
      }
    },
    "/PDF.ExtractInfo": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "PDF.ExtractInfo",
        "summary": "Extract the info of the PDF stored in <code>xpath</code> and put it in the fields referenced by <code>properties</code>. <code>properties</code> is a <code>key=value</code> list (one key-value pair/line, where <code>key</code> is the xpath of the destination field and <code>value</code> is the exact label (case sensitive) as returned by the PageExtractor (see this operation documentation). If there is no blob or the blob is not a PDF, all the values referenced in <code>properties</code> are cleared (set to empty string, 0, ...).",
        "tags": [
          "Document"
        ]
      }
    },
    "/PDF.ExtractLinks": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "PDF.ExtractLinks",
        "summary": "Returns a JSON string of an array of objects with page, subType, text and link fields. If getAll is true, returns all the links (Remote Go To, Launch and URI in the current version).",
        "tags": [
          "Conversion"
        ]
      }
    },
    "/PDF.ExtractPages": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "PDF.ExtractPages",
        "summary": "Extract pages from <code>startPage</code> to <code>endPage</code> (inclusive) from the input object. If a Blob is used as input, the <code>xpath</xpath> parameter is not used. <code>title</code>, <code>subject</code> and <code>author</code> are optional. If the PDF is encrypted, a password is required.",
        "tags": [
          "Conversion"
        ]
      }
    },
    "/PDF.ExtractText": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "PDF.ExtractText",
        "summary": "Extracts raw text from a PDF. If the PDF is encrypted, a password is required.",
        "tags": [
          "Document"
        ]
      }
    },
    "/PDF.MergeWithBlobs": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "PDF.MergeWithBlobs",
        "summary": "The input blob(s) always is(are) the first PDFs. The operation appends the blob referenced in the <code>toAppendVarName</code> Context variable. It then appends all the blobs stored in the <code>toAppendListVarName</code> Context variable. Returns the final PDF.",
        "tags": [
          "Conversion"
        ]
      }
    },
    "/PDF.MergeWithDocs": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "PDF.MergeWithDocs",
        "summary": "The input document(s) always is(are) the first PDFs, and their PDF is read in the <code>xpath</code> field (but it is ok for the input doc to have no blob). The operation appends the blob referenced in the <code>toAppendVarName</code> Context variable. It then appends all the blobs stored in the <code>toAppendListVarName</code> Context variable. It then append the blobs stored in the docs whose IDs are passed in <code>toAppendDocIDsVarName</code> (the same <code>xpath</code> is used). Returns the final PDF.",
        "tags": [
          "Conversion"
        ]
      }
    },
    "/PDF.RemoveEncryption": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "PDF.RemoveEncryption",
        "summary": "Removes the encryption, returns a copy of the blob. If the operation is ran on Document(s), xpath lets you specificy where to get the blob from (default: file:content).",
        "tags": [
          "Conversion"
        ]
      }
    },
    "/PDF.WatermarkWithImage": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "PDF.WatermarkWithImage",
        "summary": "<p>Return a <em>new</em> blob combining the input PDF and the<code> image </code>blob.</p><p>Properties must be one or more of the following (the default if the property is not set):</p><ul><li><code>scale </code>(1.0) : 1.0 is the original size of the picture</li><li><code>alphaColor</code> (0.5) : 0 is full transparency, 1 is solid</li><li><code>xPosition </code>(0) : in pixels from left or between 0 (left) and 1 (right) if relativeCoordinates is set to true</li><li><code>yPosition</code> (0) : in pixels from bottom or between 0 (bottom) and 1 (top) if relativeCoordinates is set to true</li><li><code>invertX</code> (false) : xPosition starts from the right going left</li><li><code>invertY</code> (false) : yPosition starts from the top going down</li><li><code>relativeCoordinates</code> (false)</li></ul>",
        "tags": [
          "Conversion"
        ]
      }
    },
    "/PDF.WatermarkWithPDF": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "PDF.WatermarkWithPDF",
        "summary": "Returns a new blob combining the input PDF and an overlaid PDF on every page.",
        "tags": [
          "Conversion"
        ]
      }
    },
    "/PDF.WatermarkWithText": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "PDF.WatermarkWithText",
        "summary": "<p>Return a <em>new</em> blob combining the input PDF and the <code>text</code> text.</p><p>Properties must be one or more of the following (the default if the property is not set):</p><ul><li><code>fontFamily</code> (Helvetica) </li><li><code>fontSize</code> (72)</li><li><code>rotation</code> (0): in&nbsp;counterclockwise degrees</li><li><code>hex255Color</code> (#000000)</li><li><code>alphaColor</code> (0.5) : 0 is full transparency, 1 is solid</li><li><code>xPosition</code> (0) : in pixels from left or between 0 (left) and 1 (right) if relativeCoordinates is set to true</li><li><code>yPosition</code> (0) : in pixels from bottom or between 0 (bottom) and 1 (top) if relativeCoordinates is set to true</li><li><code>invertX</code> (false) : xPosition starts from the right going left</li><li><code>invertY</code> (false) : yPosition starts from the top going down</li><li><code>relativeCoordinates</code> (false)</li></ul>",
        "tags": [
          "Conversion"
        ]
      }
    },
    "/PermissionsPurge": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "PermissionsPurge",
        "summary": "Schedule a work to archive ACEs based on permissions_purge page provider from the input document.",
        "tags": [
          "Services"
        ]
      }
    },
    "/Picture.Create": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Picture.Create",
        "summary": "Create a Picture document in the input folder. You can initialize the document properties using the 'properties' parameter. The properties are specified as <i>key=value</i> pairs separated by a new line. The key <i>originalPicture</i> is used to reference the JSON representation of the Blob for the original picture. The <i>pictureTemplates</i> parameter can be used to define the size of the different views to be generated, each line must be a JSONObject { title=\"title\", description=\"description\", maxsize=maxsize}. Returns the created document.",
        "tags": [
          "Services"
        ]
      }
    },
    "/Picture.GetView": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Picture.GetView",
        "summary": "Get an image from a Picture document.",
        "tags": [
          "Conversion"
        ]
      }
    },
    "/Picture.RecomputeViews": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Picture.RecomputeViews",
        "summary": "Recompute the picture views of the documents resulting from the provided NXQL query.",
        "tags": [
          "Services"
        ]
      }
    },
    "/Picture.Resize": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Picture.Resize",
        "summary": "Use conversion service to resize a picture contained in a Document or a Blob",
        "tags": [
          "Conversion"
        ]
      }
    },
    "/Proxy.GetSourceDocument": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Proxy.GetSourceDocument",
        "summary": "Get the live document even if this is a Proxy or Version Document.",
        "tags": [
          "Document"
        ]
      }
    },
    "/Render.Document": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Render.Document",
        "summary": "Get a document or a list of document in input and outputs one or more blobs that contain a rendered view for each input document given a rendering template. The template attribute may contain either the template content either a template URI. Template URis are strings in the form 'template:template_name' and will be located using the runtime resource service. Return the rendered file(s) as blob(s)",
        "tags": [
          "Conversion"
        ]
      }
    },
    "/Render.DocumentFeed": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Render.DocumentFeed",
        "summary": "Get a list of documents as input and outputs a single blob containing the rendering of the document list. The template attribute may contain either the template content either a template URI. Template URis are strings in the form 'template:template_name' and will be located using the runtime resource service. Return the rendered blob",
        "tags": [
          "Conversion"
        ]
      }
    },
    "/RenditionDefinition.Suggestion": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "RenditionDefinition.Suggestion",
        "summary": "Get rendition definition suggestion",
        "tags": [
          "Services"
        ]
      }
    },
    "/Repository.GetDocument": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Repository.GetDocument",
        "summary": "Fetch a document from the repository given its reference (path or UID). The document will become the input of the next operation.",
        "tags": [
          "Fetch"
        ]
      }
    },
    "/Repository.PageProvider": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Repository.PageProvider",
        "summary": "Perform a query or a named provider query on the repository. Result is paginated. The query result will become the input for the next operation. If no query or provider name is given, a query returning all the documents that the user has access to will be executed.",
        "tags": [
          "Fetch"
        ]
      }
    },
    "/Repository.Query": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Repository.Query",
        "summary": "Perform a query on the repository. The document list returned will become the input for the next operation.",
        "tags": [
          "Fetch"
        ]
      }
    },
    "/Repository.ResultSetPageProvider": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Repository.ResultSetPageProvider",
        "summary": "Perform a query or a named provider query on the repository. Result is paginated. The result is returned as a RecordSet (QueryAndFetch) rather than as a List of DocumentThe query result will become the input for the next operation. If no query or provider name is given, a query returning all the documents that the user has access to will be executed.",
        "tags": [
          "Fetch"
        ]
      }
    },
    "/Repository.ResultSetQuery": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Repository.ResultSetQuery",
        "summary": "Perform a query on the repository. The result set returned will become the input for the next operation.",
        "tags": [
          "Fetch"
        ]
      }
    },
    "/Repository.SaveSession": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Repository.SaveSession",
        "summary": "Commit any changes made by the operation on the documents. This can be used to explicitly commit changes. This operation can be executed on any type of input. The input of this operation will be preserved as the input for the next operation in the chain.",
        "tags": [
          "Execution Flow"
        ]
      }
    },
    "/RunDocumentOperation": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "RunDocumentOperation",
        "summary": "Run an operation chain which is returning a document in the current context. The input for the chain ro run is the current input of the operation. Return the output of the chain as a document. The 'parameters' injected are accessible in the subcontext ChainParameters. For instance, @{ChainParameters['parameterKey']}.",
        "tags": [
          "Execution Flow"
        ]
      }
    },
    "/RunFileOperation": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "RunFileOperation",
        "summary": "Run an operation chain which is returning a file in the current context. The input for the chain to run is a file or a list of files. Return the output of the chain as a file or a list of files. The 'parameters' injected are accessible in the subcontext ChainParameters. For instance, @{ChainParameters['parameterKey']}.",
        "tags": [
          "Execution Flow"
        ]
      }
    },
    "/RunInputScript": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "RunInputScript",
        "summary": "Run a script from the input blob. A blob comtaining script result is returned.",
        "tags": [
          "Scripting"
        ]
      }
    },
    "/RunOperation": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "RunOperation",
        "summary": "Run an operation chain in the current context. The 'parameters' injected are accessible in the subcontext ChainParameters. For instance, @{ChainParameters['parameterKey']}.",
        "tags": [
          "Execution Flow"
        ]
      }
    },
    "/RunOperationOnList": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "RunOperationOnList",
        "summary": "Run an operation for each element from the list defined by the 'list' parameter. The 'list' parameter is pointing to a context variable that represents the list which will be iterated. The 'item' parameter represents the name of the context variable which will point to the current element in the list at each iteration. You can use the 'isolate' parameter to specify whether or not the evalution context is the same as the parent context or a copy of it. If the 'isolate' parameter is 'true' then a copy of the current context is used and so that modifications in this context will not affect the parent context. Any input is accepted. The input is returned back as output when operation terminates. The 'parameters' injected are accessible in the subcontext ChainParameters. For instance, @{ChainParameters['parameterKey']}.",
        "tags": [
          "Execution Flow"
        ]
      }
    },
    "/RunOperationOnListInNewTx": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "RunOperationOnListInNewTx",
        "summary": "Run an operation/chain in a new Transaction for each element from the list defined by the 'list' parameter. The 'list' parameter is pointing to a context variable that represents the list which will be iterated. The 'itemName' parameter represents the name of the context variable which will point to the current element in the list at each iteration. You can use the 'isolate' parameter to specify whether or not the evalution context is the same as the parent context or a copy of it. If the 'isolate' parameter is 'true' then a copy of the current context is used and so that modifications in this context will not affect the parent context. Any input is accepted. The input is returned back as output when operation terminates.",
        "tags": [
          "Execution Flow"
        ]
      }
    },
    "/RunOperationOnProvider": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "RunOperationOnProvider",
        "summary": "Run an operation for each page of the provider defined by the provider name, the operation input is the curent page ",
        "tags": [
          "Execution Flow"
        ]
      }
    },
    "/RunScript": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "RunScript",
        "summary": "Run a script which content is specified as text in the 'script' parameter",
        "tags": [
          "Scripting"
        ]
      }
    },
    "/Seam.AddErrorMessage": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Seam.AddErrorMessage",
        "summary": "Add a message to be displayed in case the chain execution fails. This is a void operation - the input will be returned back as output",
        "tags": [
          "User Interface"
        ]
      }
    },
    "/Seam.AddInfoMessage": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Seam.AddInfoMessage",
        "summary": "Add a message to be displayed after the chain is successfuly executed. This is a void operation - the input will be returned back as output",
        "tags": [
          "User Interface"
        ]
      }
    },
    "/Seam.AddMessage": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Seam.AddMessage",
        "summary": "Add a feedback message to be displayed. The message will be internationalized. You can specify the severity of the message using INFO, WARN and ERROR, default is INFO. Messages parameters are extracted from the context using the 'AddMessage.messageParams'.",
        "tags": [
          "User Interface"
        ]
      }
    },
    "/Seam.AddToClipboard": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Seam.AddToClipboard",
        "summary": "Add a input document(s) to clipboard. Returns back the document(s)",
        "tags": [
          "User Interface"
        ]
      }
    },
    "/Seam.AddToWorklist": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Seam.AddToWorklist",
        "summary": "Add the input document(s) to worklist. Returns back the document(s)",
        "tags": [
          "User Interface"
        ]
      }
    },
    "/Seam.ClearClipboard": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Seam.ClearClipboard",
        "summary": "Clear the clipboard content.",
        "tags": [
          "User Interface"
        ]
      }
    },
    "/Seam.ClearSelectedDocuments": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Seam.ClearSelectedDocuments",
        "summary": "Clear the selected documents list.",
        "tags": [
          "User Interface"
        ]
      }
    },
    "/Seam.ClearWorklist": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Seam.ClearWorklist",
        "summary": "Clear the worklist content.",
        "tags": [
          "User Interface"
        ]
      }
    },
    "/Seam.CreateDocumentForm": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Seam.CreateDocumentForm",
        "summary": "Show the document creation form given a type. This is a void operation: the input object is returned back as the output.",
        "tags": [
          "User Interface"
        ]
      }
    },
    "/Seam.CreateDocumentInUI": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Seam.CreateDocumentInUI",
        "summary": "Creates a document in UI, as if user was hitting the 'Create' button on a the document creation form. It assumes that the contextual 'changeableDocument' document from the Seam context has been updated to hold properties defined for creation. It will navigate to the newly created document context, set its view as outcome, and return the newly created document.",
        "tags": [
          "User Interface"
        ]
      }
    },
    "/Seam.DestroyContext": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Seam.DestroyContext",
        "summary": "Cleanup up Seam context",
        "tags": [
          "User Interface"
        ]
      }
    },
    "/Seam.DownloadFile": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Seam.DownloadFile",
        "summary": "Download a file",
        "tags": [
          "User Interface"
        ]
      }
    },
    "/Seam.FetchDocument": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Seam.FetchDocument",
        "summary": "Fetch a document from the Seam context given its Seam name.",
        "tags": [
          "Fetch"
        ]
      }
    },
    "/Seam.FetchFromClipboard": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Seam.FetchFromClipboard",
        "summary": "Get clipboard content from the UI context.",
        "tags": [
          "Fetch"
        ]
      }
    },
    "/Seam.FetchFromWorklist": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Seam.FetchFromWorklist",
        "summary": "Get worklist content from the UI context.",
        "tags": [
          "Fetch"
        ]
      }
    },
    "/Seam.GetChangeableDocument": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Seam.GetChangeableDocument",
        "summary": "Get the current changeable document from the UI context. The changeable document is used on creation forms.",
        "tags": [
          "Fetch"
        ]
      }
    },
    "/Seam.GetCurrentDocument": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Seam.GetCurrentDocument",
        "summary": "Get the current Document from the UI context.",
        "tags": [
          "Fetch"
        ]
      }
    },
    "/Seam.GetCurrentDomain": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Seam.GetCurrentDomain",
        "summary": "Get the current Domain from the UI context.",
        "tags": [
          "Fetch"
        ]
      }
    },
    "/Seam.GetCurrentWorkspace": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Seam.GetCurrentWorkspace",
        "summary": "Get the current Workspace from the UI context.",
        "tags": [
          "Fetch"
        ]
      }
    },
    "/Seam.GetDocumentsFromSelectionList": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Seam.GetDocumentsFromSelectionList",
        "summary": "Fetch the documents selected in the selection list passed as a parameter. If the list name is empty, the current folder selection list is used.",
        "tags": [
          "Fetch"
        ]
      }
    },
    "/Seam.GetSelectedDocuments": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Seam.GetSelectedDocuments",
        "summary": "Fetch the documents selected in the current folder listing",
        "tags": [
          "Fetch"
        ]
      }
    },
    "/Seam.InitContext": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Seam.InitContext",
        "summary": "Initialize a Seam context (including Conversation if needed)",
        "tags": [
          "User Interface"
        ]
      }
    },
    "/Seam.NavigateTo": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Seam.NavigateTo",
        "summary": "Navigate to the input document. The outcome of the UI action will be stored in the operation chain context as the 'Outcome' variable. Returns back the document.",
        "tags": [
          "User Interface"
        ]
      }
    },
    "/Seam.PushDocument": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Seam.PushDocument",
        "summary": "Push the current input document into Seam context. Returns back the document.",
        "tags": [
          "User Interface"
        ]
      }
    },
    "/Seam.RaiseEvents": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Seam.RaiseEvents",
        "summary": "Raise Seam events without parameters. This is a void operation - the input object is returned back as the output",
        "tags": [
          "User Interface"
        ]
      }
    },
    "/Seam.Refresh": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Seam.Refresh",
        "summary": "Refresh the UI cache. This is a void operation - the input object is returned back as the oputput",
        "tags": [
          "User Interface"
        ]
      }
    },
    "/Seam.RunOperation": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Seam.RunOperation",
        "summary": "Initialize a Seam context (including Conversation if needed) and runs an Operation",
        "tags": [
          "User Interface"
        ]
      }
    },
    "/Seam.SaveDocumentInUI": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Seam.SaveDocumentInUI",
        "summary": "Saves a document in UI, as if user was hitting the 'Save' button on a the document edition form. It assumes that the contextual 'currentDocument' document from the Seam context has been updated to hold the new properties. It will navigate to the edited document context, set its view as outcome, and return it.",
        "tags": [
          "User Interface"
        ]
      }
    },
    "/Seam.SetOutcome": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Seam.SetOutcome",
        "summary": "Set the 'Outcome' context variable that represent a JSF outcome string. This outcome can be used by the next operations that need an outcome. It preserves the current input (e.g returns back the same input).",
        "tags": [
          "User Interface"
        ]
      }
    },
    "/SeamActions.GET": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "SeamActions.GET",
        "summary": "SeamActions.GET",
        "tags": [
          "Chain"
        ]
      }
    },
    "/Search.SuggestersLauncher": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Search.SuggestersLauncher",
        "summary": "Get and launch the suggesters defined and return a list of Suggestion objects.",
        "tags": [
          "User Interface"
        ]
      }
    },
    "/Service.HotReloadStudioSnapshot": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Service.HotReloadStudioSnapshot",
        "summary": "Updates Studio project with latest snapshot.",
        "tags": [
          "Services"
        ]
      }
    },
    "/Services.RemoveDocumentTags": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Services.RemoveDocumentTags",
        "summary": "Remove all document tags.",
        "tags": [
          "Services"
        ]
      }
    },
    "/Services.TagDocument": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Services.TagDocument",
        "summary": "Tag document with one or several 'tags'.",
        "tags": [
          "Services"
        ]
      }
    },
    "/Services.UntagDocument": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Services.UntagDocument",
        "summary": "Untag document from one or several 'tags'.",
        "tags": [
          "Services"
        ]
      }
    },
    "/Tag.Suggestion": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Tag.Suggestion",
        "summary": "Get tag suggestion",
        "tags": [
          "Services"
        ]
      }
    },
    "/Task.ApplyDocumentMapping": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Task.ApplyDocumentMapping",
        "summary": "Applies the mapping passed in parameter on the task document. The sourceDoc in the mapping is the input document in the workflow. The operation throws a NuxeoException if the input document is not a Task.",
        "tags": [
          "Workflow Context"
        ]
      }
    },
    "/Task.Create": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Task.Create",
        "summary": "Enable to create a task bound to the document. <p><b>Directive</b>, <b>comment</b> and <b>due date</b> will be displayed in the task list of the user. In <b>accept operation chain</b> and <b>reject operation chain</b> fields, you can put the operation chain ID of your choice among the one you contributed. Those operations will be executed when the user validates the task, depending on  whether he accepts or rejects the task. You have to specify a variable name (the <b>key for ... </b> parameter) to resolve target users and groups to which the task will be assigned. You can use Get Users and Groups to update a context variable with some users and groups. If you check <b>create one task per actor</b>, each of the actors will have a task to achieve, versus \"the first who achieve the task makes it disappear for the others\".</p>",
        "tags": [
          "Services"
        ]
      }
    },
    "/Task.GetAssigned": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Task.GetAssigned",
        "summary": "List tasks assigned to this user or one of its group.Task properties are serialized using JSON and returned in a Blob.",
        "tags": [
          "Services"
        ]
      }
    },
    "/TemplateProcessor.Detach": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "TemplateProcessor.Detach",
        "summary": "Detach a template from all its bound documents.",
        "tags": [
          "Conversion"
        ]
      }
    },
    "/TemplateProcessor.Render": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "TemplateProcessor.Render",
        "summary": "Render the target document with the associated template if any. Returns the rendered Blob or the main Blob if no template is associated to the document.",
        "tags": [
          "Conversion"
        ]
      }
    },
    "/Traces.Get": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Traces.Get",
        "summary": "Retrieve trace associated to a Chain or an Operation",
        "tags": [
          "Execution Context"
        ]
      }
    },
    "/Traces.ToggleRecording": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Traces.ToggleRecording",
        "summary": "Toggle Automation call tracing (you can set the 'enableTrace' parameter if you want to explicitly set the traceEnable value",
        "tags": [
          "Execution Context"
        ]
      }
    },
    "/Update.NextStep.ConditionalFolder": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Update.NextStep.ConditionalFolder",
        "summary": "Update branch to be executed ",
        "tags": [
          "Routing"
        ]
      }
    },
    "/User.CreateOrUpdate": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "User.CreateOrUpdate",
        "summary": "Create or Update User.",
        "tags": [
          "Users & Groups"
        ]
      }
    },
    "/User.Get": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "User.Get",
        "summary": "Retrieve Nuxeo principal and export it as a DocumentModel, if login parameter is not set the Operation will return informations about the current user, otherwise Directory Administration rights are required.",
        "tags": [
          "Users & Groups"
        ]
      }
    },
    "/User.GetCollections": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "User.GetCollections",
        "summary": "Get the list of all the collections visible by the currentUser. This is returning a list of collections.",
        "tags": [
          "Document"
        ]
      }
    },
    "/User.GetUserWorkspace": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "User.GetUserWorkspace",
        "summary": "Retrieve user's personal workspace.",
        "tags": [
          "Users & Groups"
        ]
      }
    },
    "/User.Invite": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "User.Invite",
        "summary": "Stores a registration request and returns its ID.",
        "tags": [
          "Users & Groups"
        ]
      }
    },
    "/User.Query": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "User.Query",
        "summary": "Query users on a combination of their username, firstName and lastName fields, or on any of them (pattern).",
        "tags": [
          "Users & Groups"
        ]
      }
    },
    "/UserGroup.Suggestion": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "UserGroup.Suggestion",
        "summary": "Get the user/group list of the running instance. This is returning a blob containing a serialized JSON array..",
        "tags": [
          "Services"
        ]
      }
    },
    "/UserWorkspace.CreateDocumentFromBlob": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "UserWorkspace.CreateDocumentFromBlob",
        "summary": "Create Document(s) in the user's workspace from Blob(s) using the FileManagerService.",
        "tags": [
          "Services"
        ]
      }
    },
    "/VersionAndAttachFile": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "VersionAndAttachFile",
        "summary": "VersionAndAttachFile",
        "tags": [
          "Chain"
        ]
      }
    },
    "/VersionAndAttachFiles": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "VersionAndAttachFiles",
        "summary": "VersionAndAttachFiles",
        "tags": [
          "Chain"
        ]
      }
    },
    "/Video.AddWatermark": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Video.AddWatermark",
        "summary": "Watermark the video with the picture stored in file:content of watermark, at the position(x, y) from the left-top corner of the picture.",
        "tags": [
          "Files"
        ]
      }
    },
    "/Video.Concat": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Video.Concat",
        "summary": "Merge 2-n videos in one.",
        "tags": [
          "Files"
        ]
      }
    },
    "/Video.ExtractClosedCaptions": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Video.ExtractClosedCaptions",
        "summary": "Extracts the closed captions from the whole video or from a part of it when startAt and end time is provided. The output format references how the output is generated, and xpath can be used to indicate the video blob when using documents.",
        "tags": [
          "Conversion"
        ]
      }
    },
    "/Video.Slice": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Video.Slice",
        "summary": "SliceVideo the input blob starting at startAt, for a certain duration. The duration and startAt arguments are optional, but not simultaneously. A specific converter can be used.",
        "tags": [
          "Conversion"
        ]
      }
    },
    "/Video.SliceInParts": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Video.SliceInParts",
        "summary": "Slices the video in n parts of approximately the same duration each.",
        "tags": [
          "Conversion"
        ]
      }
    },
    "/Workflow.CreateRoutingTask": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Workflow.CreateRoutingTask",
        "summary": "Enable to create a routingTask bound to a route and its document. In <b>accept operation chain</b> and <b>reject operation chain</b> fields, you can put the operation chain ID of your choice among the one you contributed. Those operations will be executed when the user validates the task, depending on  whether he accepts or rejects the task. Extra (String) properties can be set on the taskVariables from the input document or from the step.",
        "tags": [
          "Services"
        ]
      }
    },
    "/Workflow.GetOpenTasks": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Workflow.GetOpenTasks",
        "summary": "Returns all open tasks for the input document(s). If the operation is invoked with parameters, all tasks instances for the given 'processId' originating from the given 'nodeId' are returned. The 'processId' is the id of the document representing the workflow instance. The parameter 'username' is used to fetch only tasks assigned to the given user. Tasks are queried using an unrestricted session.",
        "tags": [
          "Workflow Context"
        ]
      }
    },
    "/Workflow.RemoveRoutingTask": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Workflow.RemoveRoutingTask",
        "summary": " This operation removes all the tasks created when a given step is run.",
        "tags": [
          "Services"
        ]
      }
    },
    "/Workflow.ResumeNode": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Workflow.ResumeNode",
        "summary": "Resumes a route instance on a given node. When a parameter is not specified, it will be fetched from the current context if the operation is executed in the context of a running workflow (it applies to the current workflow and to the current node).",
        "tags": [
          "Workflow Context"
        ]
      }
    },
    "/Workflow.SetNodeVariable": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Workflow.SetNodeVariable",
        "summary": "Set a workflow node variable given a name and the value in the context of a running workflow. To compute the value at runtime from the current context you should use an EL expression as the value. This operation works on any input type and return back the input as the output.",
        "tags": [
          "Workflow Context"
        ]
      }
    },
    "/Workflow.UserTaskPageProvider": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "Workflow.UserTaskPageProvider",
        "summary": "Returns the tasks waiting for the current user.",
        "tags": [
          "Services"
        ]
      }
    },
    "/WorkflowInstance.Cancel": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "WorkflowInstance.Cancel",
        "summary": "Cancel the workflow with the given id, where the required id is the id of the document representing the workflow instance.",
        "tags": [
          "Workflow Context"
        ]
      }
    },
    "/WorkflowModel.BulkRestartInstances": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "WorkflowModel.BulkRestartInstances",
        "summary": "Bulk operation to restart workflows.",
        "tags": [
          "Workflow Context"
        ]
      }
    },
    "/WorkflowTask.Complete": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "WorkflowTask.Complete",
        "summary": "Completes the input task. If this is the last task the workflow will continue. Returns back the task document. \"Status\" is the id of the button the user would have clicked to submit the task form (if the outgoing transitions of the workflow node that created the task have conditions depending on it).@since 5.9.3 and 5.8.0-HF11 you can set multiple  node or workflow variables when completing the task (also similar to ending the task via form submision from the UI).The variables are specified as <i>key=value</i> pairs separated by a new line.To specify multi-line values you can use a \\ character followed by a new line. <p>Example:<pre>description=foo bar</pre>For updating a date, you will need to expose the value as ISO 8601 format, for instance : <p>Example:<pre>workflowVarString=A sample value<br>workflowVarDate=@{org.nuxeo.ecm.core.schema.utils.DateParser.formatW3CDateTime(CurrentDate.date)}</pre><p>For all values, you have to submit a JSON representation. This is an example for a variable of type StringList:<p><pre>nodeVarList = [\"John Doe\", \"John Test\"]</pre></p>",
        "tags": [
          "Workflow Context"
        ]
      }
    },
    "/acceptComment": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "acceptComment",
        "summary": "acceptComment",
        "tags": [
          "Chain"
        ]
      }
    },
    "/addCurrentDocumentToWorklist": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "addCurrentDocumentToWorklist",
        "summary": "addCurrentDocumentToWorklist",
        "tags": [
          "Chain"
        ]
      }
    },
    "/blobToPDF": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "blobToPDF",
        "summary": "blobToPDF",
        "tags": [
          "Chain"
        ]
      }
    },
    "/cancelWorkflow": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "cancelWorkflow",
        "summary": "cancelWorkflow",
        "tags": [
          "Chain"
        ]
      }
    },
    "/conditionalTask": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "conditionalTask",
        "summary": "conditionalTask",
        "tags": [
          "Chain"
        ]
      }
    },
    "/containerContentBlob": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "containerContentBlob",
        "summary": "containerContentBlob",
        "tags": [
          "Chain"
        ]
      }
    },
    "/decideNextStepAndSimpleValidate": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "decideNextStepAndSimpleValidate",
        "summary": "decideNextStepAndSimpleValidate",
        "tags": [
          "Chain"
        ]
      }
    },
    "/downloadFilesZip": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "downloadFilesZip",
        "summary": "downloadFilesZip",
        "tags": [
          "Chain"
        ]
      }
    },
    "/eh_nxtrSetPortfolioDescriptionChain": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "eh_nxtrSetPortfolioDescriptionChain",
        "summary": "Adds a description that will tell users what to do next when a portfolio is created.",
        "tags": [
          "Chain"
        ]
      }
    },
    "/eh_nxtrSetProjectDescriptionChain": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "eh_nxtrSetProjectDescriptionChain",
        "summary": "Adds a description that will tell users what to do next when a project is created.",
        "tags": [
          "Chain"
        ]
      }
    },
    "/evaluateCondition": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "evaluateCondition",
        "summary": "evaluateCondition",
        "tags": [
          "Chain"
        ]
      }
    },
    "/followLifeCycleTransition": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "followLifeCycleTransition",
        "summary": "followLifeCycleTransition",
        "tags": [
          "Chain"
        ]
      }
    },
    "/followLifeCycleTransitionTask": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "followLifeCycleTransitionTask",
        "summary": "followLifeCycleTransitionTask",
        "tags": [
          "Chain"
        ]
      }
    },
    "/initInitiatorComment": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "initInitiatorComment",
        "summary": "initInitiatorComment",
        "tags": [
          "Chain"
        ]
      }
    },
    "/javascript.FilterTemplatesByType": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "javascript.FilterTemplatesByType",
        "summary": "Filter templates according to the type of a given input document.",
        "tags": [
          "javascript"
        ]
      }
    },
    "/javascript.RenderPdf": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "javascript.RenderPdf",
        "summary": "Render a document with a given template and converts it to PDF.",
        "tags": [
          "javascript"
        ]
      }
    },
    "/javascript.nxtrGetNXQLQueryFromRefsJS": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "javascript.nxtrGetNXQLQueryFromRefsJS",
        "summary": "This script generates a properly formatted NXQL query, from a multivalued string property containing document ids. The query is then stored into the \"refsQuery\" context variable. The property's xpath needs to be sent as a parameter.",
        "tags": [
          "javascript"
        ]
      }
    },
    "/logInAudit": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "logInAudit",
        "summary": "logInAudit",
        "tags": [
          "Chain"
        ]
      }
    },
    "/mainBlob": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "mainBlob",
        "summary": "mainBlob",
        "tags": [
          "Chain"
        ]
      }
    },
    "/nextAssignee": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "nextAssignee",
        "summary": "nextAssignee",
        "tags": [
          "Chain"
        ]
      }
    },
    "/notifyInitiatorEndOfWorkflow": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "notifyInitiatorEndOfWorkflow",
        "summary": "notifyInitiatorEndOfWorkflow",
        "tags": [
          "Chain"
        ]
      }
    },
    "/publishDocument": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "publishDocument",
        "summary": "publishDocument",
        "tags": [
          "Chain"
        ]
      }
    },
    "/publishTask": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "publishTask",
        "summary": "publishTask",
        "tags": [
          "Chain"
        ]
      }
    },
    "/reinitAssigneeComment": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "reinitAssigneeComment",
        "summary": "reinitAssigneeComment",
        "tags": [
          "Chain"
        ]
      }
    },
    "/rejectComment": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "rejectComment",
        "summary": "rejectComment",
        "tags": [
          "Chain"
        ]
      }
    },
    "/sendTaskCreatedNotificationMail": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "sendTaskCreatedNotificationMail",
        "summary": "sendTaskCreatedNotificationMail",
        "tags": [
          "Chain"
        ]
      }
    },
    "/setDone": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "setDone",
        "summary": "setDone",
        "tags": [
          "Chain"
        ]
      }
    },
    "/setNextStep": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "setNextStep",
        "summary": "setNextStep",
        "tags": [
          "Chain"
        ]
      }
    },
    "/setTaskDone": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "setTaskDone",
        "summary": "setTaskDone",
        "tags": [
          "Chain"
        ]
      }
    },
    "/simpleChooseNextOption1AndDone": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "simpleChooseNextOption1AndDone",
        "summary": "simpleChooseNextOption1AndDone",
        "tags": [
          "Chain"
        ]
      }
    },
    "/simpleChooseNextOption2AndDone": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "simpleChooseNextOption2AndDone",
        "summary": "simpleChooseNextOption2AndDone",
        "tags": [
          "Chain"
        ]
      }
    },
    "/simpleRefuse": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "simpleRefuse",
        "summary": "simpleRefuse",
        "tags": [
          "Chain"
        ]
      }
    },
    "/simpleTask": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "simpleTask",
        "summary": "simpleTask",
        "tags": [
          "Chain"
        ]
      }
    },
    "/simpleUndo": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "simpleUndo",
        "summary": "simpleUndo",
        "tags": [
          "Chain"
        ]
      }
    },
    "/simpleValidate": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "simpleValidate",
        "summary": "simpleValidate",
        "tags": [
          "Chain"
        ]
      }
    },
    "/terminateWorkflow": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "terminateWorkflow",
        "summary": "terminateWorkflow",
        "tags": [
          "Chain"
        ]
      }
    },
    "/ua_nxtrRenderPortfolioChain": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "ua_nxtrRenderPortfolioChain",
        "summary": "This chain needs to be launched from a portfolio. It: \n- Generates a rendition for the portfolio's front page with a first template,\n- Calls the ua_nxtrRenderPortfolio_renderProjectChain to render all projects associated to it with another template and attach them, \n- Concatenates them with the portfolio's front page file.\nNote that there is no PDF conversion here, it is defined in the template's output format directly.",
        "tags": [
          "Chain"
        ]
      }
    },
    "/ua_nxtrRenderPortfolio_renderProjectChain": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "ua_nxtrRenderPortfolio_renderProjectChain",
        "summary": "Called by ua_nxtrRenderPortfolioChain for every project that needs to be rendered, through the \"Run Document Chain\" operation.\nThis chain:\n- Binds a template on the document\n- Renders the document with a template, \n- Adds the rendered file into the portfolio's attachments\nThe restore document input operation in the end is needed because the chain is supposed to return a document (it is called from run document chain in a parent chain), and the attach file operation returns a blob.\nNote that there is no PDF conversion here, it is defined in the template's output format directly.",
        "tags": [
          "Chain"
        ]
      }
    },
    "/ua_nxtrRenderProjectChain": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "ua_nxtrRenderProjectChain",
        "summary": "This chain is called from a project, when a user clicks on the button to generate a project revenue sheet.\nIt generates the revenue sheet from the ProjectRevenue template (you can look at it in Domain > Templates > ProjectRevenue).",
        "tags": [
          "Chain"
        ]
      }
    },
    "/undoRunningTask": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "undoRunningTask",
        "summary": "undoRunningTask",
        "tags": [
          "Chain"
        ]
      }
    },
    "/updateCommentsOnDoc": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "updateCommentsOnDoc",
        "summary": "updateCommentsOnDoc",
        "tags": [
          "Chain"
        ]
      }
    },
    "/validateDocument": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "validateDocument",
        "summary": "validateDocument",
        "tags": [
          "Chain"
        ]
      }
    },
    "/voidChain": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "voidChain",
        "summary": "voidChain",
        "tags": [
          "Chain"
        ]
      }
    },
    "/xmlExportRendition": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "xmlExportRendition",
        "summary": "xmlExportRendition",
        "tags": [
          "Chain"
        ]
      }
    },
    "/zipTreeExportRendition": {
      "post": {
        "consumes": [
          "application/json+nxrequest"
        ],
        "produces": [
          "application/json",
          "application/json+nxentity"
        ],
        "parameters": [
          {
            "description": "{ \"input\": \"\", \"params\": {}, \"context\": {} }",
            "in": "body",
            "name": "operationParams",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OperationParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          }
        },
        "operationId": "zipTreeExportRendition",
        "summary": "zipTreeExportRendition",
        "tags": [
          "Chain"
        ]
      }
    }
  },
  "definitions": {
    "OperationParams": {
      "properties": {
        "input": {
          "type": "string",
          "uniqueItems": false
        },
        "context": {
          "type": "object",
          "uniqueItems": false
        },
        "params": {
          "type": "object",
          "uniqueItems": false
        }
      },
      "required": [
        "context",
        "params"
      ],
      "uniqueItems": false
    }
  }
}
